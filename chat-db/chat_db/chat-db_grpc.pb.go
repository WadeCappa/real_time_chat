// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: chat_db/chat-db.proto

package chat_db

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chatdb_ReadMostRecent_FullMethodName = "/chat_db.chatdb/ReadMostRecent"
	Chatdb_PublishMessage_FullMethodName = "/chat_db.chatdb/PublishMessage"
)

// ChatdbClient is the client API for Chatdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatdbClient interface {
	ReadMostRecent(ctx context.Context, in *ReadMostRecentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadMostRecentResponse], error)
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error)
}

type chatdbClient struct {
	cc grpc.ClientConnInterface
}

func NewChatdbClient(cc grpc.ClientConnInterface) ChatdbClient {
	return &chatdbClient{cc}
}

func (c *chatdbClient) ReadMostRecent(ctx context.Context, in *ReadMostRecentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadMostRecentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatdb_ServiceDesc.Streams[0], Chatdb_ReadMostRecent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadMostRecentRequest, ReadMostRecentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatdb_ReadMostRecentClient = grpc.ServerStreamingClient[ReadMostRecentResponse]

func (c *chatdbClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishMessageResponse)
	err := c.cc.Invoke(ctx, Chatdb_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatdbServer is the server API for Chatdb service.
// All implementations must embed UnimplementedChatdbServer
// for forward compatibility.
type ChatdbServer interface {
	ReadMostRecent(*ReadMostRecentRequest, grpc.ServerStreamingServer[ReadMostRecentResponse]) error
	PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error)
	mustEmbedUnimplementedChatdbServer()
}

// UnimplementedChatdbServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatdbServer struct{}

func (UnimplementedChatdbServer) ReadMostRecent(*ReadMostRecentRequest, grpc.ServerStreamingServer[ReadMostRecentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadMostRecent not implemented")
}
func (UnimplementedChatdbServer) PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedChatdbServer) mustEmbedUnimplementedChatdbServer() {}
func (UnimplementedChatdbServer) testEmbeddedByValue()                {}

// UnsafeChatdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatdbServer will
// result in compilation errors.
type UnsafeChatdbServer interface {
	mustEmbedUnimplementedChatdbServer()
}

func RegisterChatdbServer(s grpc.ServiceRegistrar, srv ChatdbServer) {
	// If the following call pancis, it indicates UnimplementedChatdbServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chatdb_ServiceDesc, srv)
}

func _Chatdb_ReadMostRecent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadMostRecentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatdbServer).ReadMostRecent(m, &grpc.GenericServerStream[ReadMostRecentRequest, ReadMostRecentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatdb_ReadMostRecentServer = grpc.ServerStreamingServer[ReadMostRecentResponse]

func _Chatdb_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatdbServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatdb_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatdbServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chatdb_ServiceDesc is the grpc.ServiceDesc for Chatdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_db.chatdb",
	HandlerType: (*ChatdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _Chatdb_PublishMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMostRecent",
			Handler:       _Chatdb_ReadMostRecent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat_db/chat-db.proto",
}
