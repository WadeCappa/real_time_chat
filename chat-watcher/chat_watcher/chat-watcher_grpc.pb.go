// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: chat_watcher/chat-watcher.proto

package chat_watcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chatwatcherserver_WatchChannel_FullMethodName = "/chat_watcher.chatwatcherserver/WatchChannel"
)

// ChatwatcherserverClient is the client API for Chatwatcherserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatwatcherserverClient interface {
	WatchChannel(ctx context.Context, in *WatchChannelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchChannelResponse], error)
}

type chatwatcherserverClient struct {
	cc grpc.ClientConnInterface
}

func NewChatwatcherserverClient(cc grpc.ClientConnInterface) ChatwatcherserverClient {
	return &chatwatcherserverClient{cc}
}

func (c *chatwatcherserverClient) WatchChannel(ctx context.Context, in *WatchChannelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchChannelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatwatcherserver_ServiceDesc.Streams[0], Chatwatcherserver_WatchChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchChannelRequest, WatchChannelResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatwatcherserver_WatchChannelClient = grpc.ServerStreamingClient[WatchChannelResponse]

// ChatwatcherserverServer is the server API for Chatwatcherserver service.
// All implementations must embed UnimplementedChatwatcherserverServer
// for forward compatibility.
type ChatwatcherserverServer interface {
	WatchChannel(*WatchChannelRequest, grpc.ServerStreamingServer[WatchChannelResponse]) error
	mustEmbedUnimplementedChatwatcherserverServer()
}

// UnimplementedChatwatcherserverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatwatcherserverServer struct{}

func (UnimplementedChatwatcherserverServer) WatchChannel(*WatchChannelRequest, grpc.ServerStreamingServer[WatchChannelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchChannel not implemented")
}
func (UnimplementedChatwatcherserverServer) mustEmbedUnimplementedChatwatcherserverServer() {}
func (UnimplementedChatwatcherserverServer) testEmbeddedByValue()                           {}

// UnsafeChatwatcherserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatwatcherserverServer will
// result in compilation errors.
type UnsafeChatwatcherserverServer interface {
	mustEmbedUnimplementedChatwatcherserverServer()
}

func RegisterChatwatcherserverServer(s grpc.ServiceRegistrar, srv ChatwatcherserverServer) {
	// If the following call pancis, it indicates UnimplementedChatwatcherserverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chatwatcherserver_ServiceDesc, srv)
}

func _Chatwatcherserver_WatchChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchChannelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatwatcherserverServer).WatchChannel(m, &grpc.GenericServerStream[WatchChannelRequest, WatchChannelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatwatcherserver_WatchChannelServer = grpc.ServerStreamingServer[WatchChannelResponse]

// Chatwatcherserver_ServiceDesc is the grpc.ServiceDesc for Chatwatcherserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatwatcherserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_watcher.chatwatcherserver",
	HandlerType: (*ChatwatcherserverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchChannel",
			Handler:       _Chatwatcherserver_WatchChannel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat_watcher/chat-watcher.proto",
}
