services:
  postgres:
    build:
      context: .
      dockerfile: postgres-dockerfile
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data 
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes: 
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
  broker:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    environment:
      KAFKA_KRAFT_MODE: "false"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes: 
      - kafka_data:/var/lib/kafka/data
  channels:
    env_file: running-in-docker.env
    ports:
      - "50055:50055"
    build:
      context: channel-manager
      dockerfile: Dockerfile
    depends_on:
      - postgres
  watcher:
    env_file: running-in-docker.env
    ports:
      - "50053:50053"
    build:
      context: chat-watcher
      dockerfile: Dockerfile
    depends_on:
      - postgres
  writer:
    env_file: running-in-docker.env
    ports:
      - "50052:50052"
    build:
      context: chat-db
      dockerfile: Dockerfile
    depends_on:
      - postgres
volumes:
  postgres_data:
  kafka_data:
  zookeeper_data:
  zookeeper_log:
