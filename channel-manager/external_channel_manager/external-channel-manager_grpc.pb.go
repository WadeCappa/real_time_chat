// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: external_channel_manager/external-channel-manager.proto

package external_channel_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Externalchannelmanager_CreateChannel_FullMethodName           = "/external_channel_manager.externalchannelmanager/CreateChannel"
	Externalchannelmanager_DeleteChannel_FullMethodName           = "/external_channel_manager.externalchannelmanager/DeleteChannel"
	Externalchannelmanager_ChangeChannelVisibility_FullMethodName = "/external_channel_manager.externalchannelmanager/ChangeChannelVisibility"
	Externalchannelmanager_JoinChannel_FullMethodName             = "/external_channel_manager.externalchannelmanager/JoinChannel"
	Externalchannelmanager_AddToChannel_FullMethodName            = "/external_channel_manager.externalchannelmanager/AddToChannel"
	Externalchannelmanager_GetChannels_FullMethodName             = "/external_channel_manager.externalchannelmanager/GetChannels"
	Externalchannelmanager_GetAllChannels_FullMethodName          = "/external_channel_manager.externalchannelmanager/GetAllChannels"
	Externalchannelmanager_CanWatch_FullMethodName                = "/external_channel_manager.externalchannelmanager/CanWatch"
	Externalchannelmanager_CanWrite_FullMethodName                = "/external_channel_manager.externalchannelmanager/CanWrite"
)

// ExternalchannelmanagerClient is the client API for Externalchannelmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalchannelmanagerClient interface {
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
	ChangeChannelVisibility(ctx context.Context, in *ChangeChannelVisibilityRequest, opts ...grpc.CallOption) (*ChangeChannelVisibilityResponse, error)
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*JoinChannelResponse, error)
	AddToChannel(ctx context.Context, in *AddToChannelRequest, opts ...grpc.CallOption) (*AddToChannelResponse, error)
	GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChannelsResponse], error)
	GetAllChannels(ctx context.Context, in *GetAllChannelsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllChannelsResponse], error)
	CanWatch(ctx context.Context, in *CanWatchRequest, opts ...grpc.CallOption) (*CanWatchResponse, error)
	CanWrite(ctx context.Context, in *CanWriteRequest, opts ...grpc.CallOption) (*CanWriteResponse, error)
}

type externalchannelmanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalchannelmanagerClient(cc grpc.ClientConnInterface) ExternalchannelmanagerClient {
	return &externalchannelmanagerClient{cc}
}

func (c *externalchannelmanagerClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, Externalchannelmanager_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalchannelmanagerClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, Externalchannelmanager_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalchannelmanagerClient) ChangeChannelVisibility(ctx context.Context, in *ChangeChannelVisibilityRequest, opts ...grpc.CallOption) (*ChangeChannelVisibilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeChannelVisibilityResponse)
	err := c.cc.Invoke(ctx, Externalchannelmanager_ChangeChannelVisibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalchannelmanagerClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*JoinChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinChannelResponse)
	err := c.cc.Invoke(ctx, Externalchannelmanager_JoinChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalchannelmanagerClient) AddToChannel(ctx context.Context, in *AddToChannelRequest, opts ...grpc.CallOption) (*AddToChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToChannelResponse)
	err := c.cc.Invoke(ctx, Externalchannelmanager_AddToChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalchannelmanagerClient) GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChannelsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Externalchannelmanager_ServiceDesc.Streams[0], Externalchannelmanager_GetChannels_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetChannelsRequest, GetChannelsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Externalchannelmanager_GetChannelsClient = grpc.ServerStreamingClient[GetChannelsResponse]

func (c *externalchannelmanagerClient) GetAllChannels(ctx context.Context, in *GetAllChannelsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllChannelsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Externalchannelmanager_ServiceDesc.Streams[1], Externalchannelmanager_GetAllChannels_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllChannelsRequest, GetAllChannelsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Externalchannelmanager_GetAllChannelsClient = grpc.ServerStreamingClient[GetAllChannelsResponse]

func (c *externalchannelmanagerClient) CanWatch(ctx context.Context, in *CanWatchRequest, opts ...grpc.CallOption) (*CanWatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanWatchResponse)
	err := c.cc.Invoke(ctx, Externalchannelmanager_CanWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalchannelmanagerClient) CanWrite(ctx context.Context, in *CanWriteRequest, opts ...grpc.CallOption) (*CanWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanWriteResponse)
	err := c.cc.Invoke(ctx, Externalchannelmanager_CanWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalchannelmanagerServer is the server API for Externalchannelmanager service.
// All implementations must embed UnimplementedExternalchannelmanagerServer
// for forward compatibility.
type ExternalchannelmanagerServer interface {
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	ChangeChannelVisibility(context.Context, *ChangeChannelVisibilityRequest) (*ChangeChannelVisibilityResponse, error)
	JoinChannel(context.Context, *JoinChannelRequest) (*JoinChannelResponse, error)
	AddToChannel(context.Context, *AddToChannelRequest) (*AddToChannelResponse, error)
	GetChannels(*GetChannelsRequest, grpc.ServerStreamingServer[GetChannelsResponse]) error
	GetAllChannels(*GetAllChannelsRequest, grpc.ServerStreamingServer[GetAllChannelsResponse]) error
	CanWatch(context.Context, *CanWatchRequest) (*CanWatchResponse, error)
	CanWrite(context.Context, *CanWriteRequest) (*CanWriteResponse, error)
	mustEmbedUnimplementedExternalchannelmanagerServer()
}

// UnimplementedExternalchannelmanagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalchannelmanagerServer struct{}

func (UnimplementedExternalchannelmanagerServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedExternalchannelmanagerServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedExternalchannelmanagerServer) ChangeChannelVisibility(context.Context, *ChangeChannelVisibilityRequest) (*ChangeChannelVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeChannelVisibility not implemented")
}
func (UnimplementedExternalchannelmanagerServer) JoinChannel(context.Context, *JoinChannelRequest) (*JoinChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedExternalchannelmanagerServer) AddToChannel(context.Context, *AddToChannelRequest) (*AddToChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToChannel not implemented")
}
func (UnimplementedExternalchannelmanagerServer) GetChannels(*GetChannelsRequest, grpc.ServerStreamingServer[GetChannelsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedExternalchannelmanagerServer) GetAllChannels(*GetAllChannelsRequest, grpc.ServerStreamingServer[GetAllChannelsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllChannels not implemented")
}
func (UnimplementedExternalchannelmanagerServer) CanWatch(context.Context, *CanWatchRequest) (*CanWatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanWatch not implemented")
}
func (UnimplementedExternalchannelmanagerServer) CanWrite(context.Context, *CanWriteRequest) (*CanWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanWrite not implemented")
}
func (UnimplementedExternalchannelmanagerServer) mustEmbedUnimplementedExternalchannelmanagerServer() {
}
func (UnimplementedExternalchannelmanagerServer) testEmbeddedByValue() {}

// UnsafeExternalchannelmanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalchannelmanagerServer will
// result in compilation errors.
type UnsafeExternalchannelmanagerServer interface {
	mustEmbedUnimplementedExternalchannelmanagerServer()
}

func RegisterExternalchannelmanagerServer(s grpc.ServiceRegistrar, srv ExternalchannelmanagerServer) {
	// If the following call pancis, it indicates UnimplementedExternalchannelmanagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Externalchannelmanager_ServiceDesc, srv)
}

func _Externalchannelmanager_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalchannelmanagerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Externalchannelmanager_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalchannelmanagerServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Externalchannelmanager_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalchannelmanagerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Externalchannelmanager_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalchannelmanagerServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Externalchannelmanager_ChangeChannelVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeChannelVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalchannelmanagerServer).ChangeChannelVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Externalchannelmanager_ChangeChannelVisibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalchannelmanagerServer).ChangeChannelVisibility(ctx, req.(*ChangeChannelVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Externalchannelmanager_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalchannelmanagerServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Externalchannelmanager_JoinChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalchannelmanagerServer).JoinChannel(ctx, req.(*JoinChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Externalchannelmanager_AddToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalchannelmanagerServer).AddToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Externalchannelmanager_AddToChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalchannelmanagerServer).AddToChannel(ctx, req.(*AddToChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Externalchannelmanager_GetChannels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChannelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalchannelmanagerServer).GetChannels(m, &grpc.GenericServerStream[GetChannelsRequest, GetChannelsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Externalchannelmanager_GetChannelsServer = grpc.ServerStreamingServer[GetChannelsResponse]

func _Externalchannelmanager_GetAllChannels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllChannelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExternalchannelmanagerServer).GetAllChannels(m, &grpc.GenericServerStream[GetAllChannelsRequest, GetAllChannelsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Externalchannelmanager_GetAllChannelsServer = grpc.ServerStreamingServer[GetAllChannelsResponse]

func _Externalchannelmanager_CanWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalchannelmanagerServer).CanWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Externalchannelmanager_CanWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalchannelmanagerServer).CanWatch(ctx, req.(*CanWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Externalchannelmanager_CanWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalchannelmanagerServer).CanWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Externalchannelmanager_CanWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalchannelmanagerServer).CanWrite(ctx, req.(*CanWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Externalchannelmanager_ServiceDesc is the grpc.ServiceDesc for Externalchannelmanager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Externalchannelmanager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "external_channel_manager.externalchannelmanager",
	HandlerType: (*ExternalchannelmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _Externalchannelmanager_CreateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _Externalchannelmanager_DeleteChannel_Handler,
		},
		{
			MethodName: "ChangeChannelVisibility",
			Handler:    _Externalchannelmanager_ChangeChannelVisibility_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _Externalchannelmanager_JoinChannel_Handler,
		},
		{
			MethodName: "AddToChannel",
			Handler:    _Externalchannelmanager_AddToChannel_Handler,
		},
		{
			MethodName: "CanWatch",
			Handler:    _Externalchannelmanager_CanWatch_Handler,
		},
		{
			MethodName: "CanWrite",
			Handler:    _Externalchannelmanager_CanWrite_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChannels",
			Handler:       _Externalchannelmanager_GetChannels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllChannels",
			Handler:       _Externalchannelmanager_GetAllChannels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "external_channel_manager/external-channel-manager.proto",
}
