// source: chat-watcher.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.chat_watcher.ChannelEvent', null, global);
goog.exportSymbol('proto.chat_watcher.ChannelEvent.EventunionCase', null, global);
goog.exportSymbol('proto.chat_watcher.NewMessageEvent', null, global);
goog.exportSymbol('proto.chat_watcher.UnknownEvent', null, global);
goog.exportSymbol('proto.chat_watcher.WatchChannelRequest', null, global);
goog.exportSymbol('proto.chat_watcher.WatchChannelResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat_watcher.WatchChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat_watcher.WatchChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat_watcher.WatchChannelResponse.displayName = 'proto.chat_watcher.WatchChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat_watcher.WatchChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat_watcher.WatchChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat_watcher.WatchChannelRequest.displayName = 'proto.chat_watcher.WatchChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat_watcher.NewMessageEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat_watcher.NewMessageEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat_watcher.NewMessageEvent.displayName = 'proto.chat_watcher.NewMessageEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat_watcher.UnknownEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat_watcher.UnknownEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat_watcher.UnknownEvent.displayName = 'proto.chat_watcher.UnknownEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat_watcher.ChannelEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chat_watcher.ChannelEvent.oneofGroups_);
};
goog.inherits(proto.chat_watcher.ChannelEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat_watcher.ChannelEvent.displayName = 'proto.chat_watcher.ChannelEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat_watcher.WatchChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chat_watcher.WatchChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat_watcher.WatchChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.WatchChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.chat_watcher.ChannelEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat_watcher.WatchChannelResponse}
 */
proto.chat_watcher.WatchChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat_watcher.WatchChannelResponse;
  return proto.chat_watcher.WatchChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat_watcher.WatchChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat_watcher.WatchChannelResponse}
 */
proto.chat_watcher.WatchChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chat_watcher.ChannelEvent;
      reader.readMessage(value,proto.chat_watcher.ChannelEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat_watcher.WatchChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat_watcher.WatchChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat_watcher.WatchChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.WatchChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chat_watcher.ChannelEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChannelEvent event = 1;
 * @return {?proto.chat_watcher.ChannelEvent}
 */
proto.chat_watcher.WatchChannelResponse.prototype.getEvent = function() {
  return /** @type{?proto.chat_watcher.ChannelEvent} */ (
    jspb.Message.getWrapperField(this, proto.chat_watcher.ChannelEvent, 1));
};


/**
 * @param {?proto.chat_watcher.ChannelEvent|undefined} value
 * @return {!proto.chat_watcher.WatchChannelResponse} returns this
*/
proto.chat_watcher.WatchChannelResponse.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat_watcher.WatchChannelResponse} returns this
 */
proto.chat_watcher.WatchChannelResponse.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat_watcher.WatchChannelResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat_watcher.WatchChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chat_watcher.WatchChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat_watcher.WatchChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.WatchChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat_watcher.WatchChannelRequest}
 */
proto.chat_watcher.WatchChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat_watcher.WatchChannelRequest;
  return proto.chat_watcher.WatchChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat_watcher.WatchChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat_watcher.WatchChannelRequest}
 */
proto.chat_watcher.WatchChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat_watcher.WatchChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat_watcher.WatchChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat_watcher.WatchChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.WatchChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 channelId = 1;
 * @return {number}
 */
proto.chat_watcher.WatchChannelRequest.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.chat_watcher.WatchChannelRequest} returns this
 */
proto.chat_watcher.WatchChannelRequest.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat_watcher.NewMessageEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.chat_watcher.NewMessageEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat_watcher.NewMessageEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.NewMessageEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    conent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    messageid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat_watcher.NewMessageEvent}
 */
proto.chat_watcher.NewMessageEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat_watcher.NewMessageEvent;
  return proto.chat_watcher.NewMessageEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat_watcher.NewMessageEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat_watcher.NewMessageEvent}
 */
proto.chat_watcher.NewMessageEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat_watcher.NewMessageEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat_watcher.NewMessageEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat_watcher.NewMessageEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.NewMessageEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string conent = 1;
 * @return {string}
 */
proto.chat_watcher.NewMessageEvent.prototype.getConent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat_watcher.NewMessageEvent} returns this
 */
proto.chat_watcher.NewMessageEvent.prototype.setConent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 userId = 2;
 * @return {number}
 */
proto.chat_watcher.NewMessageEvent.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chat_watcher.NewMessageEvent} returns this
 */
proto.chat_watcher.NewMessageEvent.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 channelId = 3;
 * @return {number}
 */
proto.chat_watcher.NewMessageEvent.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.chat_watcher.NewMessageEvent} returns this
 */
proto.chat_watcher.NewMessageEvent.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 messageId = 4;
 * @return {number}
 */
proto.chat_watcher.NewMessageEvent.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.chat_watcher.NewMessageEvent} returns this
 */
proto.chat_watcher.NewMessageEvent.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat_watcher.UnknownEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.chat_watcher.UnknownEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat_watcher.UnknownEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.UnknownEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat_watcher.UnknownEvent}
 */
proto.chat_watcher.UnknownEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat_watcher.UnknownEvent;
  return proto.chat_watcher.UnknownEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat_watcher.UnknownEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat_watcher.UnknownEvent}
 */
proto.chat_watcher.UnknownEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat_watcher.UnknownEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat_watcher.UnknownEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat_watcher.UnknownEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.UnknownEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.chat_watcher.UnknownEvent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat_watcher.UnknownEvent} returns this
 */
proto.chat_watcher.UnknownEvent.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chat_watcher.ChannelEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.chat_watcher.ChannelEvent.EventunionCase = {
  EVENTUNION_NOT_SET: 0,
  NEWMESSAGE: 1,
  UNKNOWNEVENT: 2
};

/**
 * @return {proto.chat_watcher.ChannelEvent.EventunionCase}
 */
proto.chat_watcher.ChannelEvent.prototype.getEventunionCase = function() {
  return /** @type {proto.chat_watcher.ChannelEvent.EventunionCase} */(jspb.Message.computeOneofCase(this, proto.chat_watcher.ChannelEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat_watcher.ChannelEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.chat_watcher.ChannelEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat_watcher.ChannelEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.ChannelEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    newmessage: (f = msg.getNewmessage()) && proto.chat_watcher.NewMessageEvent.toObject(includeInstance, f),
    unknownevent: (f = msg.getUnknownevent()) && proto.chat_watcher.UnknownEvent.toObject(includeInstance, f),
    timepostedunixtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offest: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat_watcher.ChannelEvent}
 */
proto.chat_watcher.ChannelEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat_watcher.ChannelEvent;
  return proto.chat_watcher.ChannelEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat_watcher.ChannelEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat_watcher.ChannelEvent}
 */
proto.chat_watcher.ChannelEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chat_watcher.NewMessageEvent;
      reader.readMessage(value,proto.chat_watcher.NewMessageEvent.deserializeBinaryFromReader);
      msg.setNewmessage(value);
      break;
    case 2:
      var value = new proto.chat_watcher.UnknownEvent;
      reader.readMessage(value,proto.chat_watcher.UnknownEvent.deserializeBinaryFromReader);
      msg.setUnknownevent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimepostedunixtime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat_watcher.ChannelEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat_watcher.ChannelEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat_watcher.ChannelEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat_watcher.ChannelEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewmessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chat_watcher.NewMessageEvent.serializeBinaryToWriter
    );
  }
  f = message.getUnknownevent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chat_watcher.UnknownEvent.serializeBinaryToWriter
    );
  }
  f = message.getTimepostedunixtime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOffest();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional NewMessageEvent newMessage = 1;
 * @return {?proto.chat_watcher.NewMessageEvent}
 */
proto.chat_watcher.ChannelEvent.prototype.getNewmessage = function() {
  return /** @type{?proto.chat_watcher.NewMessageEvent} */ (
    jspb.Message.getWrapperField(this, proto.chat_watcher.NewMessageEvent, 1));
};


/**
 * @param {?proto.chat_watcher.NewMessageEvent|undefined} value
 * @return {!proto.chat_watcher.ChannelEvent} returns this
*/
proto.chat_watcher.ChannelEvent.prototype.setNewmessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.chat_watcher.ChannelEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat_watcher.ChannelEvent} returns this
 */
proto.chat_watcher.ChannelEvent.prototype.clearNewmessage = function() {
  return this.setNewmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat_watcher.ChannelEvent.prototype.hasNewmessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UnknownEvent unknownEvent = 2;
 * @return {?proto.chat_watcher.UnknownEvent}
 */
proto.chat_watcher.ChannelEvent.prototype.getUnknownevent = function() {
  return /** @type{?proto.chat_watcher.UnknownEvent} */ (
    jspb.Message.getWrapperField(this, proto.chat_watcher.UnknownEvent, 2));
};


/**
 * @param {?proto.chat_watcher.UnknownEvent|undefined} value
 * @return {!proto.chat_watcher.ChannelEvent} returns this
*/
proto.chat_watcher.ChannelEvent.prototype.setUnknownevent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.chat_watcher.ChannelEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat_watcher.ChannelEvent} returns this
 */
proto.chat_watcher.ChannelEvent.prototype.clearUnknownevent = function() {
  return this.setUnknownevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat_watcher.ChannelEvent.prototype.hasUnknownevent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 timePostedUnixTime = 3;
 * @return {number}
 */
proto.chat_watcher.ChannelEvent.prototype.getTimepostedunixtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.chat_watcher.ChannelEvent} returns this
 */
proto.chat_watcher.ChannelEvent.prototype.setTimepostedunixtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 offest = 4;
 * @return {number}
 */
proto.chat_watcher.ChannelEvent.prototype.getOffest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.chat_watcher.ChannelEvent} returns this
 */
proto.chat_watcher.ChannelEvent.prototype.setOffest = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.chat_watcher);
