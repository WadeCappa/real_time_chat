/**
 * @fileoverview gRPC-Web generated client stub for chat_watcher
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.6
// source: chat-watcher.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as chat$watcher_pb from './chat-watcher_pb'; // proto import: "chat-watcher.proto"


export class chatwatcherserverClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorWatchChannel = new grpcWeb.MethodDescriptor(
    '/chat_watcher.chatwatcherserver/WatchChannel',
    grpcWeb.MethodType.SERVER_STREAMING,
    chat$watcher_pb.WatchChannelRequest,
    chat$watcher_pb.WatchChannelResponse,
    (request: chat$watcher_pb.WatchChannelRequest) => {
      return request.serializeBinary();
    },
    chat$watcher_pb.WatchChannelResponse.deserializeBinary
  );

  watchChannel(
    request: chat$watcher_pb.WatchChannelRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<chat$watcher_pb.WatchChannelResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/chat_watcher.chatwatcherserver/WatchChannel',
      request,
      metadata || {},
      this.methodDescriptorWatchChannel);
  }

}

